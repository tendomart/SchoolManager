1. Initialize the plugin by referencing the necessary files:

<script src="sweetalert2.all.min.js"></script>
<!-- Optional: include a polyfill for ES6 Promises for IE11 and Android browser -->
<script src="https://cdn.jsdelivr.net/npm/promise-polyfill"></script>
You can also include the stylesheet separately if desired:

<script src="sweetalert2.min.js"></script>
<link rel="stylesheet" href="sweetalert2.min.css">

OR

// ES6 Modules or TypeScript
import Swal from 'sweetalert2'

// CommonJS
const Swal = require('sweetalert2')
It's possible to import JS and CSS separately, e.g. if you need to customize styles:

import Swal from 'sweetalert2/dist/sweetalert2.js'

import 'sweetalert2/src/sweetalert2.scss'
2. Call the sweetAlert2-function after the page has loaded

Swal.fire({
  title: 'Error!',
  text: 'Do you want to continue',
  type: 'error',
  confirmButtonText: 'Cool'
})


INPUT TYPES EXAMPLES

-------TEXT-----
const ipAPI = 'https://api.ipify.org?format=json'

const inputValue = fetch(ipAPI)
  .then(response => response.json())
  .then(data => data.ip)

const {value: ipAddress} = await Swal.fire({
  title: 'Enter your IP address',
  input: 'text',
  inputValue: inputValue,
  showCancelButton: true,
  inputValidator: (value) => {
    if (!value) {
      return 'You need to write something!'
    }
  }
})

if (ipAddress) {
  Swal.fire(`Your IP address is ${ipAddress}`)
}


------------EMAIL---------------
const {value: email} = await Swal.fire({
  title: 'Input email address',
  input: 'email',
  inputPlaceholder: 'Enter your email address'
})

if (email) {
  Swal.fire('Entered email: ' + email)
}

-------URL---------------

const {value: url} = await Swal.fire({
  input: 'url',
  inputPlaceholder: 'Enter the URL'
})

if (url) {
  Swal.fire('Entered URL: ' + url)
}

-------------PASSWORD -------------------------

const {value: password} = await Swal.fire({
  title: 'Enter your password',
  input: 'password',
  inputPlaceholder: 'Enter your password',
  inputAttributes: {
    maxlength: 10,
    autocapitalize: 'off',
    autocorrect: 'off'
  }
})

if (password) {
  Swal.fire('Entered password: ' + password)
}



--------- TEXTAREA ----------------------

const {value: text} = await Swal.fire({
  input: 'textarea',
  inputPlaceholder: 'Type your message here...',
  showCancelButton: true
})

if (text) {
  Swal.fire(text)
}


----------- SELECT -------------------

const {value: fruit} = await Swal.fire({
  title: 'Select field validation',
  input: 'select',
  inputOptions: {
    'apples': 'Apples',
    'bananas': 'Bananas',
    'grapes': 'Grapes',
    'oranges': 'Oranges'
  },
  inputPlaceholder: 'Select a fruit',
  showCancelButton: true,
  inputValidator: (value) => {
    return new Promise((resolve) => {
      if (value === 'oranges') {
        resolve()
      } else {
        resolve('You need to select oranges :)')
      }
    })
  }
})

-------------- SELECT ----------------

	
const {value: fruit} = await Swal.fire({
  title: 'Select field validation',
  input: 'select',
  inputOptions: {
    'apples': 'Apples',
    'bananas': 'Bananas',
    'grapes': 'Grapes',
    'oranges': 'Oranges'
  },
  inputPlaceholder: 'Select a fruit',
  showCancelButton: true,
  inputValidator: (value) => {
    return new Promise((resolve) => {
      if (value === 'oranges') {
        resolve()
      } else {
        resolve('You need to select oranges :)')
      }
    })
  }
})

if (fruit) {
  Swal.fire('You selected: ' + fruit)
}


-------------- RADIO -----------------------
// inputOptions can be an object or Promise
const inputOptions = new Promise((resolve) => {
  setTimeout(() => {
    resolve({
      '#ff0000': 'Red',
      '#00ff00': 'Green',
      '#0000ff': 'Blue'
    })
  }, 1000)
})

const {value: color} = await Swal.fire({
  title: 'Select color',
  input: 'radio',
  inputOptions: inputOptions,
  inputValidator: (value) => {
    if (!value) {
      return 'You need to choose something!'
    }
  }
})

if (color) {
  Swal.fire({html: 'You selected: ' + color})
}


-------------------CHECKBOX --------------

// inputOptions can be an object or Promise
const inputOptions = new Promise((resolve) => {
  setTimeout(() => {
    resolve({
      '#ff0000': 'Red',
      '#00ff00': 'Green',
      '#0000ff': 'Blue'
    })
  }, 1000)
})

const {value: color} = await Swal.fire({
  title: 'Select color',
  input: 'radio',
  inputOptions: inputOptions,
  inputValidator: (value) => {
    if (!value) {
      return 'You need to choose something!'
    }
  }
})

if (color) {
  Swal.fire({html: 'You selected: ' + color})
}


--------- FILE -------------------------
const {value: file} = await Swal.fire({
  title: 'Select image',
  input: 'file',
  inputAttributes: {
    'accept': 'image/*',
    'aria-label': 'Upload your profile picture'
  }
})

if (file) {
  const reader = new FileReader
  reader.onload = (e) => {
    Swal.fire({
      title: 'Your uploaded picture',
      imageUrl: e.target.result,
      imageAlt: 'The uploaded picture'
    })
  }
  reader.readAsDataURL(file)
}

------------- RANGE -----------------

Swal.fire({
  title: 'How old are you?',
  type: 'question',
  input: 'range',
  inputAttributes: {
    min: 8,
    max: 120,
    step: 1
  },
  inputValue: 25
})


---------- MULTIPLE INPUT ---------------

const {value: formValues} = await Swal.fire({
  title: 'Multiple inputs',
  html:
    '<input id="swal-input1" class="swal2-input">' +
    '<input id="swal-input2" class="swal2-input">',
  focusConfirm: false,
  preConfirm: () => {
    return [
      document.getElementById('swal-input1').value,
      document.getElementById('swal-input2').value
    ]
  }
})

if (formValues) {
  Swal.fire(JSON.stringify(formValues))
}


------- SWAL METHODS --------------------------
Method	            Description
Swal.isVisible()	Determine if modal is shown.
Swal.mixin({ ...options })	Returns an extended version of `Swal` containing `params` as defaults. Useful for reusing Swal configuration.
Swal.update({ ...options })	Updates popup options.
Swal.close()	Close the currently open SweetAlert2 modal programmatically, the Promise returned by Swal.fire() will be resolved with an empty object { }
Swal.getContainer()	Get the popup container which contains the backdrop.
Swal.getHeader()	Get the modal header. The header contains progress steps, the icon, the image, the title, and the close button.
Swal.getTitle()	Get the modal title.
Swal.getCloseButton()	Get the close button.
Swal.getContent()	Get the modal content.
Swal.getImage()	Get the image.
Swal.getActions()	Get the actions block (buttons container).
Swal.getFooter()	Get the modal footer.
Swal.getFocusableElements()	Get all focusable elements in the popup.
Swal.getConfirmButton()	Get the "Confirm" button.
Swal.getCancelButton()	Get the "Cancel" button.
Swal.enableButtons()	Enable "Confirm" and "Cancel" buttons.
Swal.disableButtons()	Disable "Confirm" and "Cancel" buttons.
Swal.enableConfirmButton()	Deprecated and will be removed in the next major release, use Swal.getConfirmButton() instead. 
Enable the "Confirm"-button only.
Swal.disableConfirmButton()	Deprecated and will be removed in the next major release, use Swal.getConfirmButton() instead. 
Disable the "Confirm"-button only.
Swal.showLoading() or Swal.enableLoading()	Disable buttons and show loader. This is useful with AJAX requests.
Swal.hideLoading() or Swal.disableLoading()	Enable buttons and hide loader.
Swal.isLoading()	Determine if modal is in the loading state. Related methods: Swal.showLoading() and Swal.hideLoading()
Swal.getTimerLeft()	Returns the time left in case when timer parameter is set.
Swal.stopTimer()	Stops the timer in case when timer parameter is set. Returns the time left
Swal.resumeTimer()	Resume the timer previously stopped. Returns the time left
Swal.toggleTimer()	Toggle state of the timer between stopped and running. Returns the time left
Swal.isTimerRunning()	Returns the status of a timer: true if is running, false if it's paused
Swal.increaseTimer(n)	Increase the timer by n milliseconds. Returns the time left
Swal.clickConfirm()	Click the "Confirm"-button programmatically.
Swal.clickCancel()	Click the "Cancel"-button programmatically.
Swal.getInput()	Get the input DOM node, this method works with input parameter.
Swal.disableInput()	Disable input. A disabled input element is unusable and un-clickable.
Swal.enableInput()	Enable input.
Swal.showValidationMessage(error)	Show the validation message DOM node.
Swal.resetValidationMessage()	Hide the validation message DOM node.
Swal.getValidationMessage()	Get the validation message DOM node.
Swal.queue([Array])	Provide array of SweetAlert2 parameters to show multiple modals, one modal after another. See usage example
Swal.getQueueStep()	Get the index of current modal in queue. When there's no active queue, null will be returned.
Swal.insertQueueStep()	Insert a modal to queue, you can specify modal positioning with second parameter. By default a modal will be added to the end of a queue.
Swal.deleteQueueStep(index)	Delete a modal at index from queue.
Swal.getProgressSteps()	Progress steps getter.
Swal.setProgressSteps([])	Progress steps setter.
Swal.showProgressSteps()	Show progress steps.
Swal.hideProgressSteps()	Hide progress steps.
Swal.isValidParameter(param)	Determine if parameter name is valid.
Swal.isUpdatableParameter(param)	Determine if parameter name is valid for Swal.update() method.



